#!/usr/bin/python3

"""
Start Logstash after checking that Elasticsearch is accepting connections.
"""

import os
import socket
import sys
import time

sys.stdout.write('Initializing Logstash')
ES_ADDRESS = (
    os.environ['ES_PORT_9200_TCP_ADDR'],
    os.environ['ES_PORT_9200_TCP_PORT']
)

TIMEOUT = int(os.environ.get('ES_TIMEOUT', 120))

KIBANA_BIN="/opt/kibana-4.0.1-linux-x64/bin/kibana"

def connection_accepted(address, timeout, connect_timeout=10, connect_delay=1):
    """
    Periodically attempt to connect to address until a connection is established
    or until timeout is reached.
    """
    start_time = time.time()
    while time.time() - start_time < timeout:
        try:
            socket.create_connection(ES_ADDRESS, connect_timeout).close()
        except socket.error:
            time.sleep(connect_delay)
        else:
            return True
    else:
        return False

sys.stdout.write('Connecting Ports')
if connection_accepted(ES_ADDRESS, TIMEOUT):
    sys.stdout.write('Starting Logstash...')
    os.execv("/bin/sed", ["/bin/sed", "-i", "s;^elasticsearch_url:.*;elasticsearch_url: http://"+os.environ['ES_PORT_9200_TCP_ADDR']+":9200;", "/opt/kibana-4.0.1-linux-x64/config/kibana.yml"])
    os.execv(KIBANA_BIN, [KIBANA_BIN, "-p", "8080"])
    sys.stdout.write('Started Logstash')
else:
    sys.stderr.write(
        'Unable to connect to ElasticSearch (%s:%s) '
        'after %s seconds.' % (ES_ADDRESS[0], ES_ADDRESS[1], TIMEOUT))
    raise SystemExit(1)
